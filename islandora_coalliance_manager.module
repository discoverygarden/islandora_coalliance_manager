<?php

/**
 * drupal hook
 * creates a new permission than can be assigned to roles
 */
function islandora_coalliance_manager_perm() {
  return array(
      'create_fedora_collections',
  );
}

/**
 * drupal hook
 * @return string
 */
function islandora_coalliance_manager_menu() {

  $items['islandora_co_manager/create_collection'] = array(
    'title' => 'Create Collection',
    'page arguments' => array(2),
    'page callback' => 'islandora_coalliance_manager_create_collection',
    'access arguments' => array('create_fedora_collections'),
  );

  return $items;
}

/**
 *
 * @return <type>
 */
function islandora_coalliance_manager_create_collection($parent_collection="islandora:root") {
  return drupal_get_form('islandora_coalliance_manager_create_collection_form', $parent_collection);
}

function islandora_coalliance_manager_get_related_objects_raw($itql_query){
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collectionClass = new CollectionClass();
  $query_results = $collectionClass->getRelatedItems(NULL, $itql_query);
  return $query_results;
}

function islandora_coalliance_manager_get_related_objects($itql_query) {
  module_load_include('inc', 'fedora_repository', 'CollectionClass');
  $collectionClass = new CollectionClass();
  $query_results = $collectionClass->getRelatedItems(NULL, $itql_query);
  $list_of_objects = islandora_coalliance_manager_itql_to_array($query_results);
  return $list_of_objects;
}

function islandora_coalliance_manager_create_collection_form(&$form_state, $parent_collection = NULL) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');

  $itql_query = 'select $object $title $content from <#ri>
                             where ($object <info:fedora/fedora-system:def/model#label> $title
                             and $object <fedora-model:hasModel> $content
                             and ($content <fedora-model:hasModel> <info:fedora/islandora:collectionCModel>)
                             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
                             order by $title';

  $existing_collections = islandora_coalliance_manager_get_related_objects($itql_query);
  $existing_collection_cmodels = islandora_coalliance_manager_get_related_objects_raw($itql_query);
  $itql_query = 'select $object  $title from <#ri> where
$object <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active>
and $object <info:fedora/fedora-system:def/model#hasModel> <info:fedora/fedora-system:ContentModel-3.0>
and $object <info:fedora/fedora-system:def/model#label> $title
order by $title';
  $existing_cmodels = islandora_coalliance_manager_get_related_objects($itql_query);
  
  $form = array();
  
/*
  $roles = user_roles(TRUE);
  $select_roles = array();
  foreach ($roles as $key => $value) {
    $select_roles[$value] = $value;
  }
*/
  
  $pid_namespaces = array(); // explode(' ',variable_get('fedora_pids_allowed', 'default: demo: changeme: Islandora: ilives: '));
  foreach (explode(' ', trim(variable_get('fedora_pids_allowed', 'default: demo: changeme: Islandora: ilives: ')))as $namespace) {
    $pid_namespaces[$namespace] = $namespace;
  }
  $existing_collection_cmodels = islandora_coalliance_manager_collection_cmodels_to_array($existing_collection_cmodels, $pid_namespaces);
  $existing_collections = islandora_coalliance_manager_limit_collections_by_namespace($existing_collections,$pid_namespaces);
  $existing_cmodels = islandora_coalliance_manager_limit_collections_by_namespace($existing_cmodels,$pid_namespaces);
  //$existing_collection_cmodels = islandora_colliance_manager_get_cmodel_types($existing_collections, $pid_namespaces);
  
  // Going to try to set the default namespace in the form to be the same as the namespace of the parent collection.
  // Get the parent namespace here by pulling off everything in front of the ":" and then re-adding the ":"
  $parent_collection_namespace = strtok($parent_collection, ":") . ":";
  $form['collection_for_ingest'] = array(
    '#type' => 'hidden',
    '#value' => $parent_collection ? $parent_collection : variable_get('fedora_repository_pid', 'islandora:top'),
  );
  $form['pid_namespace'] = array(
    '#type' => 'select',
    '#title' => t('Choose a namespace'),
    '#options' => $pid_namespaces,
    '#default_value' => $parent_collection_namespace,
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#description' => t('Choose the namespace these objects will have when ingested'),
  );
  $form['allowed_cModels'] = array(
    '#type' => 'select',
    '#title' => t('Choose the content Models allowed'),
    '#options' => $existing_cmodels,
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#description' => t('A list of existing Content Models.  These represent the types of objects that users will be allowed to ingest in this new collection'),
  );
  $form['allowed_collection_cModels'] = array(
    '#type' => 'select',
    '#title' => t('Choose the type of Collection allowed'),
    '#options' => $existing_collection_cmodels,
    '#required' => TRUE,
    '#multiple' => FALSE,
    '#description' => t('A list of existing Collection types.  These represent the types of collection objects that you can choose from.'),
  );
  $form['collection_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Collection Name'),
    '#required' => TRUE,
    '#required' => TRUE,
    '#description' => t('A name or title for the new collection'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Create'));
  
  return $form;
}

function islandora_colliance_manager_get_cmodel_types($existing_collections, $pid_namespaces){
  $cmodels = array();
  
  foreach($existing_collections as $collection => $value){
    foreach($pid_namespaces as $key => $namespace){
      if(strpos($collection,$namespace)===0){
        $cmodels[$collection]=$value;
      }
    }
  }
  return $cmodels;
}

/**
 *
 * @param <type> $existing_collections
 * @param <type> $pid_namespaces
 */
function islandora_coalliance_manager_limit_collections_by_namespace($existing_collections, $pid_namespaces){
  $collections = array();
 foreach($existing_collections as $collection => $value){
    foreach($pid_namespaces as $key => $namespace){
      if(strpos($collection,$namespace)===0){
        $collections[$collection]=$value;
      }
    }
  }
  return $collections;
}

/**
 *
 * @param <array> $form
 * @param <array> $form_state
 *
 * form_state values array look like this
  'collection_for_ingest' => string 'uofm:ContentModelCollection' (length=27)
  'pid_namespace' => string 'cogru:' (length=6)
  'allowed_cModels' =>
  array
  'demo:XML_TO_HTMLDOC' => string 'demo:XML_TO_HTMLDOC' (length=19)
  'fedora-system:FedoraObject-3.0' => string 'fedora-system:FedoraObject-3.0' (length=30)
  'collection_name' => string 'test' (length=4)
  'user_role' => string 'authenticated user' (length=18)
  'submitter_role' => string 'administrator' (length=13)
  'approver_role' => string 'administrator' (length=13)
  'manager_role' => string 'viewer' (length=6)
  'adminstrator_role' => string 'viewer' (length=6)
  'op' => string 'Create' (length=6)
  'submit' => string 'Create' (length=6)
  'form_build_id' => string 'form-44eafb6e55be3ef1ea8bac3a285f256c' (length=37)
  'form_token' => string 'e7f4d0047ef69b74efb2840df9bb2499' (length=32)
  'form_id' => string 'islandora_coalliance_manager_create_collection_form' (length=51)
 *
 */
function islandora_coalliance_manager_create_collection_form_submit(&$form, &$form_state) {
  global $user;
  global $base_url;
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'islandora_content_model_forms', 'FOXML');
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  $form_state['values']['collection_name'] = htmlspecialchars($form_state['values']['collection_name']);
  $object_helper = new ObjectHelper();
  $collection_to_ingest_into = $form_state['values']['collection_for_ingest'];
  $new_collections_label = $form_state['values']['collection_name'];
  $collection_cmodel = $form_state['values']['allowed_collection_cModels'];
  $pid_namespace = $form_state['values']['pid_namespace'];
  $pid_namespace = substr ($pid_namespace,0,strlen($pid_namespace)-1);
  $mods_stream = islandora_coalliance_manager_create_mods_stream($form, $form_state);
  $collection_policy_stream = islandora_coalliance_manager_create_collection_policy_stream($form, $form_state); //searchterms and relationship is assumed here
  $new_pid = fedora_item::get_next_PID_in_namespace($pid_namespace);
  $foxml = new FOXML($new_collections_label, $new_pid, NULL, $collection_cmodel, $collection_to_ingest_into, 'isMemberOfCollection', NULL, NULL, NULL, 'A');
  $new_object = fedora_item::ingest_from_FOXML($foxml);
  $new_object->add_datastream_from_string($collection_policy_stream, 'COLLECTION_POLICY', 'COLLECTION_POLICY', 'text/xml', 'M', null);
  $new_object->add_datastream_from_string($mods_stream,'MODS','MODS','text/xml','M','added mods stream');
  $policy_stream = $object_helper->getStream($collection_to_ingest_into, 'CHILD_SECURITY', FALSE);
  if($policy_stream) {
    $new_object->add_datastream_from_string($policy_stream,'CHILD_SECURITY','CHILD_SECURITY','text/xml','M','added child security stream');
  }
  islandora_coalliance_manager_add_thumbnail_stream($new_object);
  $return_url = '<a href="' . $base_url . '/fedora/repository/' . $new_pid . '/-/' . $new_collections_label . '"/>' . $new_collections_label . '</a>';
  $form_state['redirect'] = 'fedora/repository/' . $new_pid . '/-/'.$new_collections_label;
  ///formbuilder/edit/{object:pid}/{dsid}/{form name}
  drupal_set_message(t('Created new Collection %s', array('%s' => $new_collections_label . ' with pid ' . $new_pid)));
  
  if (module_exists('islandora_workflow')) {
    module_load_include('collection.inc', 'islandora_workflow');
    module_load_include('permissions.inc', 'islandora_workflow');
    module_load_include('inc', 'islandora_workflow');

    $parent_pid = $form['collection_for_ingest']['#value'];
      if (islandora_workflow_is_collection_workflow_tracked($parent_pid)) {
        if (islandora_workflow_user_collection_permission_check($parent_pid)) {
          islandora_workflow_init_workflow($new_pid);
        }
      }
  }
  

  return '';
}

/**
 *
 * @param <type> $new_object
 * @return <type>
 */
function islandora_coalliance_manager_add_thumbnail_stream(&$object){
    $filename = drupal_get_path('module', 'islandora_coalliance_manager') . '/images/TN.jpg';
  if (file_exists($filename)) {
    $object->add_datastream_from_file($filename,'TN','TN','image/jpg','M','added thumbnail stream');
  }
  else {
    drupal_set_message(t('Failed to add TN stream, could not load TN.jpg'), 'error');
    return FALSE;
  }
  return TRUE;
}

/**
 *
 * @param <type> $form
 * @param <type> $form_state
 * @return <type>
 */
function islandora_coalliance_manager_create_mods_stream($form, $form_state){
   $filename = drupal_get_path('module', 'islandora_coalliance_manager') . '/foxml/mods.xml';
  if (file_exists($filename)) {
    $contents = file_get_contents($filename);
    $mods_title = $form_state['values']['collection_name'];
    $contents = str_replace('mods_title', $mods_title, $contents);
    return $contents;
  }
  else {
    drupal_set_message(t('Failed to read mods template file'), 'error');
    return ' ';
  }
}

/**
 *
 * @param <array> $cmodels
 *
 */
function islandora_coalliance_manager_create_collection_policy_stream($form, $form_state) {
  $pid_namespace = $form_state['values']['pid_namespace'];
  $cmodels_for_collection_policy = $form_state['values']['allowed_cModels']; //array
  $cmodels_with_labels = $form['allowed_cModels']['#options'];
  $combined_cmodels_array = array(); //key is pid value is label
  foreach ($cmodels_for_collection_policy as $key => $value) {
    $combined_cmodels_array[$key] = $cmodels_with_labels[$key];
  }
  $dsid = 'ISLANDORACM';
  $filename = drupal_get_path('module', 'islandora_coalliance_manager') . '/foxml/collectionPolicyTemplate.xml';
  if (file_exists($filename)) {
    $xml = simplexml_load_file($filename);
    foreach ($combined_cmodels_array as $key => $value) {
      $cmodel = $xml->content_models->addChild('content_model');
      $cmodel->addAttribute('dsid', $dsid);
      $cmodel->addAttribute('name', $value);
      $cmodel->addAttribute('namespace', $pid_namespace . '1');
      $cmodel->addAttribute('pid', $key);
    }
  }
  else {
    drupal_set_message(t('Failed to read collection policy template file'), 'error');
    return;
  }
  return $xml->asXML();
}

function islandora_coalliance_manager_object_list_to_array($resultxml){
  $resultelements = simplexml_load_string($resultxml);
  if(!$resultelements){
     drupal_set_message(t('Error getting list of collection objects !e', array('!e' => $e->getMessage())), 'error');
    return;
  }
  $results = array();
   foreach ($resultelements->resultList->objectFields as $obj) {
     $results[(string)$obj->pid]=(string)$obj->title;
   }
   return $results;
}

/**
 *
 * @param <array> $query_results
 * @return string
 */
function islandora_coalliance_manager_itql_to_array($query_results) {
  try {
    $xml = new SimpleXMLElement($query_results);
  } catch (Exception $e) {
    drupal_set_message(t('Error getting list of collection objects !e', array('!e' => $e->getMessage())), 'error');
    return;
  }
  $list_of_objects = array();
  foreach ($xml->results->result as $result) {
    $a = $result->object->attributes();
    $temp = $a['uri'];
    $object = substr($temp, strrpos($temp, '/') + 1);
    $title = $result->title;
    $list_of_objects[$object] = (string) $title; //.' '.$object;
  }
  return $list_of_objects;
}

/**
 *
 * @param <type> $query_results
 * @param <type> $pid_namespaces
 * @return <type> 
 */
function islandora_coalliance_manager_collection_cmodels_to_array($query_results,$pid_namespaces) {
  try {
    $xml = new SimpleXMLElement($query_results);
  } catch (Exception $e) {
    drupal_set_message(t('Error getting list of collection objects !e', array('!e' => $e->getMessage())), 'error');
    return;
  }
  $list_of_objects = array();
  foreach ($xml->results->result as $result) {
    $a = $result->content->attributes();
    $temp = $a['uri'];
    $object = substr($temp, strrpos($temp, '/') + 1);
    $list_of_objects[$object] = (string) $object; //.' '.$object;
  }
  $list_of_objects =  islandora_coalliance_manager_limit_collections_by_namespace($list_of_objects,$pid_namespaces);
  return $list_of_objects;
}

/**
 *
 * @param <type> $path
 * @param <type> $arg
 * @return <type> 
 */
function islandora_coalliance_manager_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description' :
      return t('Fedora admin module.');
  }
}
